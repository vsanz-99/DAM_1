package ordenamiento;

public class Ordena {

	// Ordenamiento de burbuja:
    public static void burbuja(int[] data) {
    	for (int i=0; i<data.length; i++) {
    		for (int j=0; j<data.length-1; j++) {
    			if (data[j]>data[j+1]) {
    				int temp=data[j];
    				data[j]=data[j+1];
    				data[j+1]=temp;
    			}
    		}
    	}
    }
    
    // Ordenamiento por selección:
    public static void seleccion(int[] data) {
        for (int i=0; i<data.length; i++) {
            for (int j=i; j<data.length; j++) {
                if (data[i]>data[j]) {
                    int aux=data[j];
                    data[j]=data[i];
                    data[i]=aux;
                }
            }
        }
    }
    
    // Ordenamiento por inserción:
    public static void insercion(int[] data) {
        for (int i=1; i<data.length; i++) {
            int aux=data[i];
            int j=i-1;
            while (j>=0 && data[j]>aux) {
                data[j+1]=data[j];
                j--;
            }
            data[j+1]=aux;
        }
    }
    
    // Ordenamiento por el método Shell:
    public static void shell(int[] data) {

    	int salto, aux, i;
    	boolean cambios;

    	for (salto=data.length/2; salto!=0; salto/=2) {
    		cambios=true;
    		while (cambios) { // Mientras se intercambie algún elemento.                                         
    			cambios=false;
    			for (i=salto; i<data.length; i++) { // Se da una pasada
    				if (data[i-salto]>data[i]) {    // y si están desordenados
    					aux=data[i];                // se reordenan.
    					data[i]=data[i-salto];
    					data[i-salto]=aux;
    					cambios=true;               // Se marca como cambio.                                   
    				}
    			}
    		}
    	}
    }

}
